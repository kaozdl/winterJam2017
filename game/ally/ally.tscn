[gd_scene load_steps=5 format=1]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="RectangleShape2D" id=1]

custom_solver_bias = 0.0
extents = Vector2( 10, 10 )

[sub_resource type="GDScript" id=2]

script/source = "extends KinematicBody2D
var input_states = preload('res://utils/input_states.gd')

export var slow_factor = 0.2
export var time_out_default = 8

var player = null
var direction = Vector2()
var velocity = Vector2()
var time_out = time_out_default

var hurry_enabled_time = 3
var hurry_cooldown_time = 20
var hurry_enabled = true
var aux_hurry_timer = 3
var sprint_btn = input_states.new(\"sprint_btn\")
var sprint_status = \"enabled\"

var ally_timeout = 5
var ally_death_area = null

 

func is_in_length_range(vector):
	return (100 < vector.length()) and (vector.length() < 650)
	
func is_gonna_die(vector):
	return vector.length() > 650

func _ready():
	player = get_node(\"../Player\")
	ally_death_area = get_node('lose_area')
	set_fixed_process(true)

func _fixed_process(delta):
	direction = player.get_global_pos() - get_global_pos()
	
	var colissions = ally_death_area.get_overlapping_bodies()
	for colission in colissions:
		if colission.is_in_group('enemies'):
			ally_timeout -= delta
			print(ally_timeout)
	
	if ally_timeout <= 0:
		get_tree().change_scene('res://scenes/game_over.tscn')
	
	
	
	if sprint_status == \"enabled\":
		if sprint_btn.check() == 1: #JUST PRESSED
			sprint_status = \"sprinting\"
			slow_factor = slow_factor * 4
			aux_hurry_timer = hurry_enabled_time
	if sprint_status == \"sprinting\":
		aux_hurry_timer -= delta
		if aux_hurry_timer <= 0:
			slow_factor = slow_factor / 4
			aux_hurry_timer = hurry_cooldown_time
			sprint_status = \"cooldown\"
	if sprint_status == \"cooldown\":
		aux_hurry_timer -= delta
		if aux_hurry_timer <= 0:
			sprint_status = \"enabled\"
	if is_gonna_die(direction):
		time_out -= delta
		if time_out <= 0:
			get_tree().change_scene(\"res://scenes/game_over.tscn\")
	else:
		time_out = time_out_default
	
	if is_in_length_range(direction):
		var move = move(direction * delta * slow_factor)
		
		if (is_colliding()):
			var n = get_collision_normal()
			move = n.slide(direction * delta * slow_factor)
			move(move)
	"

[sub_resource type="RectangleShape2D" id=3]

custom_solver_bias = 0.0
extents = Vector2( 10, 10 )

[node name="Ally" type="KinematicBody2D"]

input/pickable = false
shapes/0/shape = SubResource( 1 )
shapes/0/transform = Matrix32( 3, 0, 0, 3, 0, 0 )
shapes/0/trigger = false
collision/layers = 1
collision/mask = 1
collision/margin = 0.08
script/script = SubResource( 2 )
slow_factor = 0.35
time_out_default = 8

[node name="sprite" type="Sprite" parent="."]

texture = ExtResource( 1 )

[node name="allyCollisionShape" type="CollisionShape2D" parent="."]

visibility/visible = false
transform/scale = Vector2( 3, 3 )
shape = SubResource( 1 )
trigger = false
_update_shape_index = 0

[node name="lose_area" type="Area2D" parent="."]

input/pickable = true
shapes/0/shape = SubResource( 3 )
shapes/0/transform = Matrix32( 3.2, 0, 0, 3.2, 0, 0 )
shapes/0/trigger = false
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="lose_area"]

transform/scale = Vector2( 3.2, 3.2 )
shape = SubResource( 3 )
trigger = false
_update_shape_index = 0


